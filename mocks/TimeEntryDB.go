// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/limeiralucas/chrono-cli/pkg/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TimeEntryDB is an autogenerated mock type for the TimeEntryDB type
type TimeEntryDB struct {
	mock.Mock
}

// Create provides a mock function with given fields: timeEntry
func (_m *TimeEntryDB) Create(timeEntry *domain.TimeEntry) (int, error) {
	ret := _m.Called(timeEntry)

	var r0 int
	if rf, ok := ret.Get(0).(func(*domain.TimeEntry) int); ok {
		r0 = rf(timeEntry)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.TimeEntry) error); ok {
		r1 = rf(timeEntry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TimeEntryDB) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrent provides a mock function with given fields:
func (_m *TimeEntryDB) GetCurrent() (*domain.TimeEntry, error) {
	ret := _m.Called()

	var r0 *domain.TimeEntry
	if rf, ok := ret.Get(0).(func() *domain.TimeEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: startTime, endTime
func (_m *TimeEntryDB) List(startTime time.Time, endTime time.Time) ([]*domain.TimeEntry, error) {
	ret := _m.Called(startTime, endTime)

	var r0 []*domain.TimeEntry
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*domain.TimeEntry); ok {
		r0 = rf(startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.TimeEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: timeEntry
func (_m *TimeEntryDB) Update(timeEntry *domain.TimeEntry) error {
	ret := _m.Called(timeEntry)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.TimeEntry) error); ok {
		r0 = rf(timeEntry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTimeEntryDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimeEntryDB creates a new instance of TimeEntryDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimeEntryDB(t mockConstructorTestingTNewTimeEntryDB) *TimeEntryDB {
	mock := &TimeEntryDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
