// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	time "time"

	tag "github.com/limeiralucas/chrono-cli/internal/tag"
	mock "github.com/stretchr/testify/mock"
)

// TimeEntryProvider is an autogenerated mock type for the TimeEntryProvider type
type TimeEntryProvider struct {
	mock.Mock
}

// AddTags provides a mock function with given fields: id, tags
func (_m *TimeEntryProvider) AddTags(id int, tags []tag.Tag) error {
	ret := _m.Called(id, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []tag.Tag) error); ok {
		r0 = rf(id, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: title, startDate
func (_m *TimeEntryProvider) Create(title string, startDate time.Time) (int, error) {
	ret := _m.Called(title, startDate)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, time.Time) int); ok {
		r0 = rf(title, startDate)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(title, startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TimeEntryProvider) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTags provides a mock function with given fields: id
func (_m *TimeEntryProvider) GetTags(id int) ([]tag.Tag, error) {
	ret := _m.Called(id)

	var r0 []tag.Tag
	if rf, ok := ret.Get(0).(func(int) []tag.Tag); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tag.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTags provides a mock function with given fields: id, tags
func (_m *TimeEntryProvider) RemoveTags(id int, tags []tag.Tag) error {
	ret := _m.Called(id, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []tag.Tag) error); ok {
		r0 = rf(id, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTitle provides a mock function with given fields: id, title
func (_m *TimeEntryProvider) UpdateTitle(id int, title string) error {
	ret := _m.Called(id, title)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(id, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTimeEntryProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimeEntryProvider creates a new instance of TimeEntryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimeEntryProvider(t mockConstructorTestingTNewTimeEntryProvider) *TimeEntryProvider {
	mock := &TimeEntryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
